// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SunriseContext))]
    [Migration("20210815021731_ChangeDatetimeToNullableTrue")]
    partial class ChangeDatetimeToNullableTrue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Core.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsDefaultAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("StateProvinceId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Suburb")
                        .HasColumnType("longtext");

                    b.Property<string>("UnitAndStreet")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core.Entities.CustomerAddress", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("longtext");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("RelativeFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("UploadedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("UploadedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedByStaffId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Core.Entities.Hazard", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.HasIndex("LastUpdatedByStaffId");

                    b.ToTable("Hazards");
                });

            modelBuilder.Entity("Core.Entities.HazardSWMS", b =>
                {
                    b.Property<string>("HazardId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("SafeWorkMethodStatementId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("HazardId", "SafeWorkMethodStatementId");

                    b.HasIndex("SafeWorkMethodStatementId");

                    b.ToTable("HazardSWMSs");
                });

            modelBuilder.Entity("Core.Entities.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("ActualEndedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("AssignedToStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("FormDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("FormTitle")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasBeenReassigned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRescheduled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LastModifiedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalAssignedToStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("RescheduledReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ScheduledEndedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ScheduledStartedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StageId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AssignedToStaffId");

                    b.HasIndex("CreatedByStaffId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifiedByStaffId");

                    b.HasIndex("OriginalAssignedToStaffId");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Core.Entities.JobAfterPhoto", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("JobId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("JobAfterPhotos");
                });

            modelBuilder.Entity("Core.Entities.JobBeforePhoto", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("JobId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("JobBeforePhotos");
                });

            modelBuilder.Entity("Core.Entities.JobChangeRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.ToTable("JobChangeRecords");
                });

            modelBuilder.Entity("Core.Entities.JobHazard", b =>
                {
                    b.Property<string>("HazardId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("HazardId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobHazards");
                });

            modelBuilder.Entity("Core.Entities.JobLog", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LogId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("JobId", "LogId");

                    b.HasIndex("LogId");

                    b.ToTable("JobLogs");
                });

            modelBuilder.Entity("Core.Entities.JobNote", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("JobId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("JobNotes");
                });

            modelBuilder.Entity("Core.Entities.JobTask", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("TaskId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("JobId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("Core.Entities.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Core.Entities.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("LastUpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.HasIndex("LastUpdatedByStaffId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Core.Entities.NoteDocument", b =>
                {
                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("NoteId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("NoteDocuments");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CreatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByStaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("LastUpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByStaffId");

                    b.HasIndex("LastUpdatedByStaffId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.SafeWorkMethodStatement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SafeWorkMethodStatements");
                });

            modelBuilder.Entity("Core.Entities.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("StaffCode")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Core.Entities.StaffRole", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("StaffId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Core.Entities.Stage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Core.Entities.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TaskFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Core.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.HasOne("Core.Entities.Staff", "UploadedByStaff")
                        .WithMany()
                        .HasForeignKey("UploadedByStaffId");

                    b.Navigation("UploadedByStaff");
                });

            modelBuilder.Entity("Core.Entities.Hazard", b =>
                {
                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.HasOne("Core.Entities.Staff", "LastUpdatedByStaff")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByStaffId");

                    b.Navigation("CreatedByStaff");

                    b.Navigation("LastUpdatedByStaff");
                });

            modelBuilder.Entity("Core.Entities.HazardSWMS", b =>
                {
                    b.HasOne("Core.Entities.Hazard", "Hazard")
                        .WithMany("SafeWorkMethodStatements")
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SafeWorkMethodStatement", "SafeWorkMethodStatement")
                        .WithMany()
                        .HasForeignKey("SafeWorkMethodStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");

                    b.Navigation("SafeWorkMethodStatement");
                });

            modelBuilder.Entity("Core.Entities.Job", b =>
                {
                    b.HasOne("Core.Entities.Address", "CustomerAddress")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Core.Entities.Staff", "AssignedToStaff")
                        .WithMany()
                        .HasForeignKey("AssignedToStaffId");

                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.HasOne("Core.Entities.Customer", "JobCustomer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Entities.Staff", "LastModifiedByStaff")
                        .WithMany()
                        .HasForeignKey("LastModifiedByStaffId");

                    b.HasOne("Core.Entities.Staff", "OriginalAssignedToStaff")
                        .WithMany()
                        .HasForeignKey("OriginalAssignedToStaffId");

                    b.HasOne("Core.Entities.Stage", "JobStage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.Navigation("AssignedToStaff");

                    b.Navigation("CreatedByStaff");

                    b.Navigation("CustomerAddress");

                    b.Navigation("JobCustomer");

                    b.Navigation("JobStage");

                    b.Navigation("LastModifiedByStaff");

                    b.Navigation("OriginalAssignedToStaff");
                });

            modelBuilder.Entity("Core.Entities.JobAfterPhoto", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("AfterPhotos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Core.Entities.JobBeforePhoto", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("BeforePhotos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Core.Entities.JobChangeRecord", b =>
                {
                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.Navigation("CreatedByStaff");
                });

            modelBuilder.Entity("Core.Entities.JobHazard", b =>
                {
                    b.HasOne("Core.Entities.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("JobHazards")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Core.Entities.JobLog", b =>
                {
                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("JobLogs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Core.Entities.JobNote", b =>
                {
                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("RelatedNotes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Core.Entities.JobTask", b =>
                {
                    b.HasOne("Core.Entities.Job", "Job")
                        .WithMany("JobTasks")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Core.Entities.Log", b =>
                {
                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.Navigation("CreatedByStaff");
                });

            modelBuilder.Entity("Core.Entities.Note", b =>
                {
                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.HasOne("Core.Entities.Staff", "LastUpdatedByStaff")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByStaffId");

                    b.Navigation("CreatedByStaff");

                    b.Navigation("LastUpdatedByStaff");
                });

            modelBuilder.Entity("Core.Entities.NoteDocument", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Note", "Note")
                        .WithMany("NoteDocuments")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.HasOne("Core.Entities.Staff", "CreatedByStaff")
                        .WithMany()
                        .HasForeignKey("CreatedByStaffId");

                    b.HasOne("Core.Entities.Staff", "LastUpdatedByStaff")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByStaffId");

                    b.Navigation("CreatedByStaff");

                    b.Navigation("LastUpdatedByStaff");
                });

            modelBuilder.Entity("Core.Entities.Staff", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Core.Entities.StaffRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Staff", "Staff")
                        .WithMany("StaffRoles")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Core.Entities.Hazard", b =>
                {
                    b.Navigation("SafeWorkMethodStatements");
                });

            modelBuilder.Entity("Core.Entities.Job", b =>
                {
                    b.Navigation("AfterPhotos");

                    b.Navigation("BeforePhotos");

                    b.Navigation("JobHazards");

                    b.Navigation("JobLogs");

                    b.Navigation("JobTasks");

                    b.Navigation("RelatedNotes");
                });

            modelBuilder.Entity("Core.Entities.Note", b =>
                {
                    b.Navigation("NoteDocuments");
                });

            modelBuilder.Entity("Core.Entities.Staff", b =>
                {
                    b.Navigation("StaffRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
